[
  {
    "objectID": "index.html#objetivo-general",
    "href": "index.html#objetivo-general",
    "title": "Proyectos de ciencia de datos con Python",
    "section": "Objetivo General",
    "text": "Objetivo General\nEn este curso, aprenderemos herramientas para el desarrollo de proyectos de ciencia de datos que incluyan diversas fuentes de datos con Python y herramientas libres. Adquiriremos habilidades para el buen manejo de proyectos que propicien la colaboración y la reproducibilidad del flujo de trabajo.",
    "crumbs": [
      "Objetivo General"
    ]
  },
  {
    "objectID": "index.html#temario",
    "href": "index.html#temario",
    "title": "Proyectos de ciencia de datos con Python",
    "section": "Temario",
    "text": "Temario\n\n\n\n\n\n\n\n\nUnidad\nTema\nSubtemas\n\n\n\n\n0\nHerramientas para una ciencia de datos reproducible y colaborativa\nInteroperabilidad de datos · Narrativa computacional · Control de versiones con git · Organización del workspace\n\n\n1\nEntorno de trabajo en Python\nInstalación con miniconda · uv, entornos virtuales, gestión de paquetes · Estructura de carpetas\n\n\n2\nPython y Jupyter Notebook\nJupyter vs JupyterLab vs marimo· Tipado dinámico · Strings & list comprehensions · f-strings · Funciones\n\n\n3\n** Sintáxis, herramientas de control y métodos de Python\nSintaxis; tipos de variables; iterables; estructuras de control; cadenas; f-strings; funciones; tipado de funciones, list-comprehensions\n\n\n4\nPandas I: importación y limpieza\npair-wise data; series temporales; datos categóricos; read_csv/read_parquet; Múltiples archivos; Fechas y datetime · Helpers lambda · Limpieza básica\n\n\n5\nVisualización con matplotlib\nAnatomía de la figura; OOP en matplotlib; fig, ax; esquemas complejos specgrid; Formato de figura\n\n\n6\nNumPy y cálculo numérico\narrays, size, shape; estadística de arreglos; Slicing & fancy indexing; Mallas\n\n\n7\nPandas II: análisis avanzado\nDatos faltantes · Resampling · groupby y ventanas móviles · Agrupación y pivot tables\n\n\n9\nCódigo robusto y rendimiento\nManejo de excepciones · Profiling · Cython · Empaquetado · Pruebas unitarias de datos\n\n\n9\nDatos oficiales del INEGI: acceso y análisis\nDescarga masiva de microdatos · API Banco de Indicadores · API DENUE · Estructura PC-AXIS/JSON-Stat · Etiquetado de variables · Limpieza y resumen de encuestas\n\n\n8\nGIS y análisis geoespacial con Python\nFundamentos GIS · GeoPandas (Shapefile, GeoJSON) · Basemaps con contextily · Mapas interactivos con Folium/Leaflet · Indicadores espaciales · Coropléticos\n\n\n10\nAplicaciones integradoras\nRetos con bases reales (ejemplo: lluvia, irradiancia, INEGI) · Mini-dashboards web · Presentación del proyecto final\n\n\n\n\nEl temario conserva los contenidos originales y solo reordena para que el análisis de datos del INEGI preceda al trabajo geoespacial.",
    "crumbs": [
      "Objetivo General"
    ]
  },
  {
    "objectID": "index.html#método-de-calificación",
    "href": "index.html#método-de-calificación",
    "title": "Proyectos de ciencia de datos con Python",
    "section": "Método de calificación",
    "text": "Método de calificación\n\n\n\nRubro\nPorcentaje\n\n\n\n\nTareas\n65%\n\n\nProyecto final\n35%\n\n\n\nPara aprobar el curso se debe tener calificación aprobatoria en Tareas y en el Proyecto Final.",
    "crumbs": [
      "Objetivo General"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html",
    "href": "clases/001_terminal_python_uv.html",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "",
    "text": "Por qué usar Miniconda\nMiniconda vs Anaconda: Anaconda trae muchos paquetes preinstalados (más pesado). Miniconda es minimalista y tú instalas solo lo que necesitas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#por-qué-usar-miniconda",
    "href": "clases/001_terminal_python_uv.html#por-qué-usar-miniconda",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "",
    "text": "Ligero y rápido: instala solo lo esencial (Python + conda).\nEntornos aislados: cada proyecto con sus propias versiones de Python y paquetes.\nReproducibilidad: puedes fijar versiones y exportar el entorno (conda env export).\nControl de canales: elegir entre defaults o conda-forge según tus necesidades.\nMultiplataforma: funciona en Windows, Linux y macOS (Intel y Apple Silicon).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#antes-de-empezar",
    "href": "clases/001_terminal_python_uv.html#antes-de-empezar",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Antes de empezar",
    "text": "Antes de empezar\n\nTen a mano tu terminal:\n\nWindows: PowerShell de miniconda\nLinux/macOS: Terminal.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#instalación-en-windows",
    "href": "clases/001_terminal_python_uv.html#instalación-en-windows",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Instalación en Windows",
    "text": "Instalación en Windows\nhttps://www.anaconda.com/download/success Opción B (instalador gráfico):\n\nDescarga el instalador de Miniconda para Windows (64-bit) desde la página oficial.\nEjecuta el .exe y sigue el asistente:\n\nAcepta la licencia.\nInstala solo para tu usuario (recomendado).\nNo marques “Add Miniconda to my PATH”.\n\nUbica la anaconda power shell\n\n\n\nAbre la terminal y ejecuta python para verificar la instalación.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#uso-de-la-terminal",
    "href": "clases/001_terminal_python_uv.html#uso-de-la-terminal",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Uso de la terminal",
    "text": "Uso de la terminal\nTemas a ver: 1. Estructura de la compu. 1. El concepto del /home/Usuario 1. Desktop, Downloads, Documents 1. Recomendación de donde crear los proyectos 1. Recomendaciones de nombres 1. Moverme entre folders 1. Llamar el explorador de archivos",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#ambientes-virtuales-qué-son-y-por-qué-usarlos",
    "href": "clases/001_terminal_python_uv.html#ambientes-virtuales-qué-son-y-por-qué-usarlos",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Ambientes virtuales: qué son y por qué usarlos",
    "text": "Ambientes virtuales: qué son y por qué usarlos\nDefinición breve. Un ambiente virtual es una “caja” aislada con su propio Python y paquetes. Así, cada proyecto (o curso) usa EXACTAMENTE las versiones que necesita sin interferir con otros proyectos ni con el Python del sistema operativo.\nIdea clave. Piensa en laboratorio: cada experimento usa su propio reactivo y protocolo. Si mezclas frascos, contaminas resultados. Con software pasa lo mismo.\n\nBeneficios para Ingeniería en Energías Renovables\n\nReproducibilidad. Puedes rehacer un análisis meses después (o en otro equipo) si documentas el entorno.\n\nAislamiento. Evitas choques de versiones: por ejemplo, un proyecto con pandas 2.2 y otro con pandas 1.5.\n\nColaboración. Todo el equipo instala lo mismo con un solo archivo; adiós “en mi compu sí corre”.\n\nDocencia. Cada práctica del curso se entrega con su entorno mínimo: estudiantes instalan y corren sin romper nada.\n\nPortabilidad. Facilita trabajar en Windows, Linux y macOS (Intel/Apple Silicon) con el mismo conjunto de paquetes.\n\n\n\nEjemplos concretos (ciencia de datos en ER)\n\nIrradiancia y fotovoltaica (pvlib). Un entorno con python, numpy, pandas, scipy y pvlib para estimar GHI/DNI/POA, pérdidas y energía AC.\n\nGIS + datos del INEGI. Un entorno con geopandas, pyproj, shapely (y a veces gdal) para unir capas socioeconómicas con clima (ERA5) y visualizar vulnerabilidad energética.\n\nAprendizaje automático. Un entorno con scikit-learn/xgboost para pronóstico de demanda eléctrica/consumo HVAC; en macOS/Apple Silicon puedes usar pytorch con backend MPS (Metal) y en Linux con CUDA cuando haya GPU NVIDIA.\n\n\n\nBuenas prácticas\n\n1 entorno por proyecto/curso. Nombres cortos: pv-solar-2025, gis-inegi, ml-hvac.\n\nEvita mezclar pip y conda. Si necesitas pip, primero instala todo lo de conda, y al final lo que solo exista en pip.\n\nBloquea versiones mínimas. Empieza con lo necesario; agrega paquetes conforme avances.\n\nDocumenta el entorno. conda env export --from-history &gt; environment.yml (captura solo lo que instalaste, no todo el árbol).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#qué-es-uv",
    "href": "clases/001_terminal_python_uv.html#qué-es-uv",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "¿Qué es uv?",
    "text": "¿Qué es uv?\nuv es un gestor de proyectos y paquetes para Python, escrito en Rust, pensado para ser “todo en uno”: crea ambientes virtuales, instala dependencias, genera un lockfile reproducible y ejecuta comandos y herramientas (similar a pip, pip-tools, virtualenv, pipx, e incluso gestiona versiones de Python). Su objetivo: ser muy rápido y simplificar el flujo de trabajo.\n\nPor qué importa en cursos y proyectos de ER\n\nInstalas lo mínimo y vuelas: ideal en laboratorios/docencia.\nMismo proyecto corre igual en Windows, Linux y macOS con el lockfile.\nMenos fricción al empezar prácticas (GIS, pvlib, ML, Jupyter).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#ventajas-de-uv-para-crear-ambientes-virtuales",
    "href": "clases/001_terminal_python_uv.html#ventajas-de-uv-para-crear-ambientes-virtuales",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Ventajas de uv para crear ambientes virtuales",
    "text": "Ventajas de uv para crear ambientes virtuales\n\nAmbientes por defecto y en segundos\nuv trabaja con ambientes virtuales de forma nativa. Crea uno con:\n\ncd /directorio/proyecto/\nuv init               # crea espacio de trabajo\n# instala programas, solo necesario una vez \nuv add jupyter notebook\n#corre libreta de Jupyter\nuv run jupyter notebook",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#rapidez-énfasis-práctico",
    "href": "clases/001_terminal_python_uv.html#rapidez-énfasis-práctico",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Rapidez (énfasis práctico)",
    "text": "Rapidez (énfasis práctico)\n\nResolver e instalar paquetes es mucho más veloz que con pip tradicional (compilado en Rust, caché global y resolución paralela).\nEn clase/taller, eso significa pasar de “esperar” a “trabajar”: crear .venv, instalar numpy/pandas/scikit-learn y abrir Jupyter en segundos, incluso en equipos modestos.\n\nEjemplo “para el curso” creando carpeta desde el home:\nmkdir curso-2026-1 # solo se requiere una vez \ncd curso-2026-1    # para entrar a la carpeta \nuv init            # solo se requiere una vez a menos que se borre el venv\nuv add jupyter notebook # solo se requiere una vez por proyecto creado\nuv run  jupyter notebook\n\nTip: la caché global de uv acelera instalaciones repetidas entre proyectos del mismo curso.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#reproducibilidad-fácil-lockfile",
    "href": "clases/001_terminal_python_uv.html#reproducibilidad-fácil-lockfile",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Reproducibilidad fácil (lockfile)",
    "text": "Reproducibilidad fácil (lockfile)\n\nLockfile universal (uv.lock) El proyecto guarda el resultado exacto de la resolución de dependencias (versiones y hashes). Se versiona en Git para que todes instalen lo mismo.\n\nResultado: el mismo entorno en Windows/Linux/macOS —ideal para prácticas, calificaciones automáticas y trabajos finales.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#buenas-prácticas-y-gotchas-windowslinuxmacos",
    "href": "clases/001_terminal_python_uv.html#buenas-prácticas-y-gotchas-windowslinuxmacos",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Buenas prácticas y “gotchas” (Windows/Linux/macOS)",
    "text": "Buenas prácticas y “gotchas” (Windows/Linux/macOS)\n\nNo mezcles gestores en el mismo entorno (no instales con Homebrew/apt + pip dentro del mismo .venv).\nJupyter: con uv run --with jupyter jupyter lab usas el entorno del proyecto. Si quieres ver el kernel en VS Code, crea el kernel (ipykernel) como arriba.\nMac ARM vs Intel: uv gestiona Python por versión/arquitectura; evita mezclar intérpretes del sistema con el .venv.\nLinux: no uses el Python del sistema para proyectos (evitas romper herramientas del SO).\nCI/Clases: usa uv sync --frozen para asegurar que todes tienen exactamente las mismas versiones.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/001_terminal_python_uv.html#objetivo-final-de-la-clase",
    "href": "clases/001_terminal_python_uv.html#objetivo-final-de-la-clase",
    "title": "1  Instalar Miniconda en Windows, Linux y macOS",
    "section": "Objetivo final de la clase",
    "text": "Objetivo final de la clase\n\nTener un ambiente virtual para el uso general del curso\nInstalar jupyter notebook\nHola mundo en Jupyter notebook",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Instalar Miniconda en Windows, Linux y macOS</span>"
    ]
  },
  {
    "objectID": "clases/002_hola_mundo.html",
    "href": "clases/002_hola_mundo.html",
    "title": "Proyectos de ciencia de datos con Python",
    "section": "",
    "text": "print(\"hola mundo\")\n\nhola mundo",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>002_hola_mundo.html</span>"
    ]
  },
  {
    "objectID": "clases/003_indentado.html",
    "href": "clases/003_indentado.html",
    "title": "Proyectos de ciencia de datos con Python",
    "section": "",
    "text": "a = 2\n\n\na\n\n2\n\n\n\nb = 2\n\n\na  + b\nc = a + b\n\n\nif c == 3:\n    print(\"c es igual a 3\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>003_indentado.html</span>"
    ]
  },
  {
    "objectID": "clases/004_variables.html",
    "href": "clases/004_variables.html",
    "title": "4  diccionario =",
    "section": "",
    "text": "entero  = 1\nflotantes = 1.\ncomplejos = 1 + 0j\ncadenas = \"cadenas\"\nboleanos = True\ndiccionarios = {\"llave\":\"valor\", \"llave2\":1}\ntuplas = (1,.1,\"cadenas\")\nlistas = [1,1.,\"hola\"]\n\n\ncadenas = \"a\"\nnumero_cadena = \"1\"\notra_cadena = 'b'\ndoblecadena = \"'cadena doble'\"\n\n\ndoblecadena\n\n\"'cadena doble'\"\n\n\n\nmateriales = {\n    \"cobre\":{\"densidad\":250_000,\"cp\":1000.,\"k\":65.},\n    \"adamantium\":{\"densidad\":2500_000,\"cp\":1000.,\"k\":65.},\n    \"oro\":{\"densidad\":2500_000,\"cp\":1000.,\"k\":65.},\n    \"kriptonita\":{\"densidad\":2500_000,\"cp\":1000.,\"k\":65.},\n}\n\n\n\n\n\nmateriales[\"cobre\"][\"cp\"]\n\n1000.0\n\n\n\nmateriales[\"cobre\"].keys()\n\ndict_keys(['densidad', 'cp', 'k'])\n\n\n\nmateriales.items()\n\ndict_items([('cobre', {'densidad': 250000, 'cp': 1000.0, 'k': 65.0}), ('adamantium', {'densidad': 2500000, 'cp': 1000.0, 'k': 65.0}), ('oro', {'densidad': 2500000, 'cp': 1000.0, 'k': 65.0}), ('kriptonita', {'densidad': 2500000, 'cp': 1000.0, 'k': 65.0})])\n\n\n\nmateriales.\n\n\n  Cell In[9], line 1\n    materiales.\n               ^\nSyntaxError: invalid syntax\n\n\n\n\n\ntype(listas)\n\nlist\n\n\n\ntupla_colores = (\"azul\",\"rojo\",'verde')\nlista_colores = [\"amarillo\",\"morado\",\"azul\"]\n\n\ntupla_colores[0]\n\n'azul'\n\n\n\nlista_colores[0]\n\n'amarillo'\n\n\n\nlista_colores[0] = \"amarillo_pollito\"\ntupla_colores[0] = \"amarillo_pollito\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[14], line 2\n      1 lista_colores[0] = \"amarillo_pollito\"\n----&gt; 2 tupla_colores[0] = \"amarillo_pollito\"\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\ntupla_colores = (\"dos\",\"numeros\")\n\n\nTrue, False, type, dir, if, else, def, list, tuple, int, float, sum\n\n\ndir = \"Cierto\"\nsum = \"algo\"\n\n\nsum(1,2)\n\n\n5 Títulos\n$ E = mc^2 $\n\nListas\nPeperoni\nJamón\n\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\n# %cd ../\n\n\n%pwd\n\n'C:\\\\Users\\\\gbv\\\\curso-2026-1-main\\\\notebooks'\n\n\n\n%lsmagic\n\nAvailable line magics:\n%alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %code_wrap  %colors  %conda  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %mamba  %matplotlib  %micromamba  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %uv  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%code_wrap  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.\n\n\n\n%time\nlista = [\"1\",\"2\",3,56]\n\nCPU times: total: 0 ns\nWall time: 0 ns\n\n\n\n%history\n\nentero  = 1\nflotantes = 1.\ncomplejos = 1 + 0j\ncadenas = \"cadenas\"\nboleanos = True\ndiccionarios = {\"llave\":\"valor\", \"llave2\":1}\ntuplas = (1,.1,\"cadenas\")\nlistas = [1,1.,\"hola\"]\ncadenas = \"a\"\nnumero_cadena = \"1\"\notra_cadena = 'b'\ndoblecadena = \"'cadena doble'\"\ndoblecadena\nmateriales = {\n    \"cobre\":{\"densidad\":250_000,\"cp\":1000.,\"k\":65.},\n    \"adamantium\":{\"densidad\":2500_000,\"cp\":1000.,\"k\":65.},\n    \"oro\":{\"densidad\":2500_000,\"cp\":1000.,\"k\":65.},\n    \"kriptonita\":{\"densidad\":2500_000,\"cp\":1000.,\"k\":65.},\n}\n# diccionario =\nmateriales[\"cobre\"][\"cp\"]\nmateriales[\"cobre\"].keys()\nmateriales.items()\nmateriales.\ntype(listas)\ntupla_colores = (\"azul\",\"rojo\",'verde')\nlista_colores = [\"amarillo\",\"morado\",\"azul\"]\ntupla_colores[0]\nlista_colores[0]\nlista_colores[0] = \"amarillo_pollito\"\ntupla_colores[0] = \"amarillo_pollito\"\n# %cd ../\n%pwd\n%lsmagic\n%time\n%time\nlista = [\"1\",\"2\",3,56]\n%history\n\n\n\n%who\n\nboleanos     cadenas     complejos   diccionarios    doblecadena     entero  flotantes   lista   lista_colores   \nlistas   materiales  numero_cadena   otra_cadena     tupla_colores   tuplas  \n\n\n\n%who int\n\nentero   \n\n\n\n%who list\n\nlista    lista_colores   listas  \n\n\n\n%who_ls\n\n['boleanos',\n 'cadenas',\n 'complejos',\n 'diccionarios',\n 'doblecadena',\n 'entero',\n 'flotantes',\n 'lista',\n 'lista_colores',\n 'listas',\n 'materiales',\n 'numero_cadena',\n 'otra_cadena',\n 'tupla_colores',\n 'tuplas']\n\n\n\n%whos\n\nVariable        Type       Data/Info\n------------------------------------\nboleanos        bool       True\ncadenas         str        a\ncomplejos       complex    (1+0j)\ndiccionarios    dict       n=2\ndoblecadena     str        'cadena doble'\nentero          int        1\nflotantes       float      1.0\nlista           list       n=4\nlista_colores   list       n=3\nlistas          list       n=3\nmateriales      dict       n=4\nnumero_cadena   str        1\notra_cadena     str        b\ntupla_colores   tuple      n=3\ntuplas          tuple      n=3\n\n\n\n# %uv add pandas\n\nUsageError: Cell magic `%%uv` not found (But line magic `%uv` exists, did you mean that instead?).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Títulos</span>"
    ]
  },
  {
    "objectID": "clases/005_nombres_variables.html",
    "href": "clases/005_nombres_variables.html",
    "title": "5  PEP 8",
    "section": "",
    "text": "ciudades = [\"cuernavaca\",\"torreon\",\"la Paz\"]\nlista = [\"cuernavaca\",\"torreon\",\"la Paz\"]\nlong = 1.1\n\n\nciudades_norte = [\"Torreon\",\"Hermosillo\",\"La Paz\"] # snake\nCiudadesNorte = [\"Torreon\",\"Hermosillo\",\"La Paz\"]  # Camel\nCiudades_Norte = [\"Torreon\",\"Hermosillo\",\"La Paz\"] # mala práctica\nciuddadesNorte = [\"...\"]\n\n\ncanción = \"Esta es una canción\"\n\nGuía de estilo para Python",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PEP 8</span>"
    ]
  },
  {
    "objectID": "clases/006_strings_lists.html",
    "href": "clases/006_strings_lists.html",
    "title": "6  Modificar una cadena de lo que sea a mayusculas",
    "section": "",
    "text": "seccion = \"exPerimeNtos y datos\"\n\n\nseccion.capitalize()\n\n'Experimentos y datos'\n\n\n\nseccion.lower()\n\n'experimentos y datos'\n\n\n\nseccion.upper()\n\n'EXPERIMENTOS Y DATOS'\n\n\n\n\"EXPERIMENTOS Y DATOS\"== seccion\n\nFalse\n\n\n\n\"EXPERIMENTOS Y DATOS\"== seccion.upper()\n\nTrue\n\n\n\ndir(seccion)\n\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'removeprefix',\n 'removesuffix',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n\n\n\nseccion\n\n'exPerimeNtos y datos'\n\n\n\nexperimento = \"Rayos X e Inyeccion letal\"\nexperimento = experimento.upper()\n\n\nexperimento\n\n'RAYOS X E INYECCION LETAL'\n\n\n\n\"3141596\".isnumeric()\n\nTrue\n\n\n\nexperimento[0]\n\n'R'\n\n\n\nlen(experimento)\n\n25\n\n\n\nexperimento[25]\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[42], line 1\n----&gt; 1 experimento[25]\n\nIndexError: string index out of range\n\n\n\n\nexperimento[-1]\n\n'L'\n\n\n\nexperimento[0:-1]\n\n'RAYOS X E INYECCION LETA'\n\n\n\nexperimento[:-1]\n\n'RAYOS X E INYECCION LETA'\n\n\n\nexperimento[:-1:3]  # [inicio:final:paso] SLICING\n\n'ROX YCNE'\n\n\n\nnumeros = [1,2,3,4,5,6,7,8,9]\n\n\nnumeros[1::2]\n\n[2, 4, 6, 8]\n\n\n\ndir(numeros)\n\n['__add__',\n '__class__',\n '__class_getitem__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n\n# for (i=0,i&lt;10,++i)\n#     numeros[i]\nfor numero in numeros:\n    print(numero)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\nfor letra in experimento:\n    print(letra)\n\nR\nA\nY\nO\nS\n \nX\n \nE\n \nI\nN\nY\nE\nC\nC\nI\nO\nN\n \nL\nE\nT\nA\nL",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Modificar una cadena de lo que sea a mayusculas</span>"
    ]
  }
]